# Import necessary libraries
import math
import cv2
import numpy as np
import mediapipe as mp
import matplotlib.pyplot as plt
import logging

# Suppress TensorFlow logging (INFO and WARNING messages)
logging.getLogger('tensorflow').setLevel(logging.ERROR)

# Initialize MediaPipe Pose
mp_pose = mp.solutions.pose
mp_drawing = mp.solutions.drawing_utils
pose = mp_pose.Pose(static_image_mode=True, 
                    min_detection_confidence=0.3, 
                    model_complexity=2)

def calculateAngle(landmark1, landmark2, landmark3):
    """
    Calculate the angle between three landmarks
    """
    try:
        x1, y1, _ = landmark1
        x2, y2, _ = landmark2
        x3, y3, _ = landmark3
        
        angle = math.degrees(math.atan2(y3 - y2, x3 - x2) - math.atan2(y1 - y2, x1 - x2))
        if angle < 0:
            angle += 360
        return angle
    except Exception as e:
        print(f"Error in calculateAngle: {str(e)}")
        return 0

def detectPose(image, pose, display=True):
    """
    Perform pose detection on an image
    """
    try:
        output_image = image.copy()
        imageRGB = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        results = pose.process(imageRGB)
        
        height, width, _ = image.shape
        landmarks = []
        
        if results.pose_landmarks:
            mp_drawing.draw_landmarks(image=output_image, 
                                    landmark_list=results.pose_landmarks,
                                    connections=mp_pose.POSE_CONNECTIONS)
            
            for landmark in results.pose_landmarks.landmark:
                landmarks.append((int(landmark.x * width), 
                                int(landmark.y * height),
                                (landmark.z * width)))
        
        if display:
            plt.figure(figsize=[22,22])
            plt.subplot(121);plt.imshow(image[:,:,::-1]);plt.title("Original Image");plt.axis('off')
            plt.subplot(122);plt.imshow(output_image[:,:,::-1]);plt.title("Output Image");plt.axis('off')
            plt.show()
        return output_image, landmarks
    except Exception as e:
        print(f"Error in detectPose: {str(e)}")
        return None, None

def classifyPose(landmarks, output_image, display=False):
    """
    Classify yoga poses based on joint angles
    """
    try:
        label = 'Unknown Pose'
        color = (0, 0, 255)
        
        # Calculate angles
        left_elbow_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value],
                                        landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value],
                                        landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value])
        
        right_elbow_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value],
                                         landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value],
                                         landmarks[mp_pose.PoseLandmark.RIGHT_WRIST.value])
        
        left_shoulder_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value],
                                           landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value],
                                           landmarks[mp_pose.PoseLandmark.LEFT_HIP.value])
        
        right_shoulder_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value],
                                            landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value],
                                            landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value])
        
        left_knee_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.LEFT_HIP.value],
                                       landmarks[mp_pose.PoseLandmark.LEFT_KNEE.value],
                                       landmarks[mp_pose.PoseLandmark.LEFT_ANKLE.value])
        
        right_knee_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value],
                                        landmarks[mp_pose.PoseLandmark.RIGHT_KNEE.value],
                                        landmarks[mp_pose.PoseLandmark.RIGHT_ANKLE.value])
        
        # Classify poses
        if (left_elbow_angle > 165 and left_elbow_angle < 195 and 
            right_elbow_angle > 165 and right_elbow_angle < 195):
            if (left_shoulder_angle > 80 and left_shoulder_angle < 110 and 
                right_shoulder_angle > 80 and right_shoulder_angle < 110):
                if (left_knee_angle > 165 and left_knee_angle < 195 or 
                    right_knee_angle > 165 and right_knee_angle < 195):
                    if (left_knee_angle > 90 and left_knee_angle < 120 or 
                        right_knee_angle > 90 and right_knee_angle < 120):
                        label = 'Warrior II Pose'
        
        if (left_elbow_angle > 165 and left_elbow_angle < 195 and 
            right_elbow_angle > 165 and right_elbow_angle < 195):
            if (left_shoulder_angle > 80 and left_shoulder_angle < 110 and 
                right_shoulder_angle > 80 and right_shoulder_angle < 110):
                if (left_knee_angle > 160 and left_knee_angle < 195 and 
                    right_knee_angle > 160 and right_knee_angle < 195):
                    label = 'T Pose'
        
        if (left_knee_angle > 165 and left_knee_angle < 195 or 
            right_knee_angle > 165 and right_knee_angle < 195):
            if (left_knee_angle > 315 and left_knee_angle < 335 or 
                right_knee_angle > 25 and right_knee_angle < 45):
                label = 'Tree Pose'
        
        if label != 'Unknown Pose':
            color = (0, 255, 0)
        
        cv2.putText(output_image, label, (10, 30), cv2.FONT_HERSHEY_PLAIN, 2, color, 2)
        
        if display:
            plt.figure(figsize=[10,10])
            plt.imshow(output_image[:,:,::-1])
            plt.title("Output Image")
            plt.axis('off')
            plt.show()
        return output_image, label
    except Exception as e:
        print(f"Error in classifyPose: {str(e)}")
        return output_image, 'Error'

# Main execution
if __name__ == "__main__":
    # List of sample image paths (adjust these paths to your actual image locations)
    image_paths = [
        r"c:\Users\sagar_c7otrfh\OneDrive\Documents\free-yoga-website-template_new\free-yoga-website-template\tree.jpg",
        r"c:\Users\sagar_c7otrfh\OneDrive\Documents\free-yoga-website-template_new\free-yoga-website-template\Tpose1.jpg",
        r"c:\Users\sagar_c7otrfh\OneDrive\Documents\free-yoga-website-template_new\free-yoga-website-template\warriorIIpose1.jpg",
        r"c:\Users\sagar_c7otrfh\OneDrive\Documents\free-yoga-website-template_new\free-yoga-website-template\unknown1.jpg"
    ]
    
    for image_path in image_paths:
        try:
            image = cv2.imread(image_path)
            if image is None:
                print(f"Failed to load image: {image_path}")
                continue
                
            output_image, landmarks = detectPose(image, pose, display=False)
            if landmarks:
                classifyPose(landmarks, output_image, display=True)
            else:
                print(f"No landmarks detected in {image_path}")
                
        except Exception as e:
            print(f"Error processing {image_path}: {str(e)}")

    # Cleanup
    pose.close()
    plt.close('all')  # Close all matplotlib figures